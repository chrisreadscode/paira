// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// update datebase schema with the following command:
//    npx prisma migrate dev --name placeholder_for_migration_note
// please kindly run this command after each schema update:
//    npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model insightsforstudents {
  id               Int     @id @default(autoincrement())
  createdAt        Float   @default(dbgenerated("SELECT extract(epoch from now());"))
  communication    Int
  criticalThinking Int
  direction        Int
  empathy          Int
  growthMindset    Int
  perseverance     Int
  resilience       Int
  selfAwareness    Int
  timeManagement   Int
  updatedAt        Float   @default(dbgenerated("SELECT extract(epoch from now());"))
  student          student @relation(fields: [studentId], references: [id])
  studentId        Int
}

model meeting {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  meetingTimeEnd   DateTime
  meetingTimeStart DateTime
  updatedAt        DateTime @updatedAt
  mentor           mentor   @relation(fields: [mentorId], references: [id])
  mentorId         Int
  student          student  @relation(fields: [studentId], references: [id])
  studentId        Int
}

model mentor {
  id             Int                                 @id @default(autoincrement())
  bio            String
  createdAt      DateTime                            @default(now())
  updatedAt      DateTime                            @updatedAt
  firstName      String
  lastName       String
  location       String
  educationLevel String
  email          String                              @unique
  password       String
  profileImage   String
  speciality     String
  university     String
  meeting        meeting[]
  messages       messagesbetweenstudentsandmentors[]
  notes          mentornote[]
  students       studentsandmentors[]
  resources      resourcesforstudentsandmentors[]
}

model mentornote {
  id        Int     @id @default(autoincrement())
  createdAt Float   @default(dbgenerated("SELECT extract(epoch from now());"))
  note      String
  title     String
  updatedAt Float   @default(dbgenerated("SELECT extract(epoch from now());"))
  mentor    mentor  @relation(fields: [mentorId], references: [id])
  mentorId  Int
  student   student @relation(fields: [studentId], references: [id])
  studentId Int
}

model message {
  id                                Int                                 @id @default(autoincrement())
  createdAt                         DateTime                            @default(now())
  message                           String
  receiverId                        Int
  senderId                          Int
  messagesbetweenstudentsandmentors messagesbetweenstudentsandmentors[]
}

model messagesbetweenstudentsandmentors {
  message   message @relation(fields: [messageId], references: [id])
  messageId Int
  mentor    mentor  @relation(fields: [mentorId], references: [id])
  mentorId  Int
  student   student @relation(fields: [studentId], references: [id])
  studentId Int

  @@id([messageId])
}

model parent {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  email     String               @unique
  firstName String
  lastName  String
  password  String
  school    String
  updatedAt DateTime             @updatedAt
  why       String
  students  studentsandparents[]
}

// A resource type: article, video, quiz, exercise
model resource {
  id                             Int                              @id @default(autoincrement())
  createdAt                      Float
  timeToCompleteInMinutes        Int
  link                           String
  summary                        String
  title                          String
  type                           String
  resourcesforstudentsandmentors resourcesforstudentsandmentors[]
}

model resourcesforstudentsandmentors {
  id         Int      @id @default(autoincrement())
  assigned   Boolean  @default(true)
  completed  Boolean  @default(false)
  createdAt  Float
  saved      Boolean  @default(false)
  mentor     mentor?  @relation(fields: [mentorId], references: [id])
  mentorId   Int?
  resource   resource @relation(fields: [resourceId], references: [id])
  resourceId Int
  student    student? @relation(fields: [studentId], references: [id])
  studentId  Int?
}

model student {
  id                  Int                                 @id @default(autoincrement())
  age                 Int
  createdAt           DateTime                            @default(now())
  email               String                              @unique
  firstName           String
  gradeLevel          Int
  lastName            String
  location            String
  password            String
  school              String
  updatedAt           DateTime                            @updatedAt
  why                 String
  insightsforstudents insightsforstudents[]
  meeting             meeting[]
  mentors             studentsandmentors[]
  messages            messagesbetweenstudentsandmentors[]
  notes               mentornote[]
  parents             studentsandparents[]
  resources           resourcesforstudentsandmentors[]
  quizanswers         quizanswers[]
}

model studentsandmentors {
  active     Boolean  @default(false)
  student    student  @relation(fields: [studentId], references: [id])
  studentId  Int
  mentor     mentor   @relation(fields: [mentorId], references: [id])
  mentorId   Int
  assignedAt DateTime @default(now())

  @@id([mentorId, studentId])
}

model studentsandparents {
  student    student  @relation(fields: [studentId], references: [id])
  studentId  Int
  parent     parent   @relation(fields: [parentId], references: [id])
  parentId   Int
  assignedAt DateTime @default(now())

  @@id([studentId, parentId])
}

model quiz {
  id                      Int           @id @default(autoincrement())
  createdAt               Float         @default(dbgenerated("SELECT extract(epoch from now());"))
  title                   String
  timeToCompleteInMinutes Int
  updatedAt               Float         @default(dbgenerated("SELECT extract(epoch from now());"))
  quizanswers             quizanswers[]
}

model quizanswers {
  id        Int     @id @default(autoincrement())
  answer    String
  question  String
  quizId    Int
  student   student @relation(fields: [studentId], references: [id])
  studentId Int
  quiz      quiz    @relation(fields: [quizId], references: [id])
}
